# This is a test comment to trigger re-indexing
name: Deploy Flask App to AWS

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  workflow_dispatch: # Allows manual trigger from GitHub UI

env:
  AWS_REGION: ap-southeast-2 # Your AWS region

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production # Or 'development' - helps with secrets management

    # Permissions needed for GitHub Actions to interact with AWS and id_token
    permissions:
      id-token: write # Required for OIDC
      contents: read # Required to checkout code

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Option 1: Use OpenID Connect (OIDC) - Most Secure & Recommended
          role-to-assume: arn:aws:iam::452271769232:role/GitHubActionsECSRole # Replace with your AWS account ID and IAM Role Name
          aws-region: ${{ env.AWS_REGION }}
          # Option 2: If OIDC is too complex for now, use Access Keys (less secure for production!)
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME  }} # Your Docker Hub username
          password: ${{ secrets.DOCKER_PASSWORD  }} # Your Docker Hub Personal Access Token (PAT)

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app # Path to your Dockerfile context
          push: true
          tags: |
            ${{ secrets.benski186 }}/flask-app-example:latest
            ${{ secrets.benski186 }}/flask-app-example:${{ github.sha }}
          file: ./app/Dockerfile # Path to your Dockerfile

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.x.x # Use your installed Terraform version, e.g., 1.7.0

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform # Run terraform commands in the terraform directory

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        working-directory: ./terraform
        env:
          TF_VAR_image_tag: ${{ secrets.DOCKER_USERNAME }}/flask-app-example:latest # Pass image tag as a Terraform variable if needed (optional for this simple case)

      # Apply only on main branch pushes OR manual workflow_dispatch
      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        run: terraform apply -auto-approve -input=false
        working-directory: ./terraform
        env:
          TF_VAR_image_tag: ${{ secrets.DOCKER_USERNAME }}/flask-app-example:latest # Optional: pass image tag


      - name: Get EC2 Instance Public IP
        id: get_ip
        run: |
          EC2_IP=$(terraform output -raw flask_app_public_ip)
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
        working-directory: ./terraform

      - name: Check Deployed Application
        run: |
          echo "Application should be live at: http://${{ env.EC2_IP }}:5000"
          # You can add a curl command here to verify the app is running
          # curl -f "http://${{ env.EC2_IP }}:5000"
